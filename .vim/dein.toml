[[plugins]]
repo = 'Shougo/dein.vim'

# ddc.vim start
[[plugins]]
repo = 'Shougo/ddc.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
    let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-cmdline'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
# ddc.vim end

# ddu.vim start
[[plugins]]
repo = 'Shougo/ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'Shougo/ddu-source-action'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'matsui54/ddu-source-command_history'

[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'

[[plugins]]
repo = 'matsui54/ddu-source-help'

[[plugins]]
repo = 'Bakudankun/ddu-source-dirmark'

[[plugins]]
repo = 'k-ota106/ddu-source-marks'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
# ddu.vim end

#colorscheme start
[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'GertjanReynaert/cobalt2-vim-theme'

[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

[[plugins]]
repo = 'ulwlu/elly.vim'

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'savq/melange'

[[plugins]]
repo = 'sainnhe/edge'

[[plugins]]
repo = 'christianchiarulli/nvcode-color-schemes.vim'
hook_add = '''
    let g:nvcode_termcolors = 256
'''

[[plugins]]
repo = 'sainnhe/sonokai'
# colorscheme end

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_setConceal = 0
    let g:indentLine_char = 'Â¦'
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# display match count
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
    nmap n <Plug>(anzu-n-with-echo)
    nmap N <Plug>(anzu-N-with-echo)
    nmap * <Plug>(asterisk-z*)<Plug>(anzu-update-search-status-with-echo)
    nmap # <Plug>(asterisk-z#)<Plug>(anzu-update-search-status-with-echo)
    set statusline=%{anzu#search_status()}
    "hide highlight and anzu-status
    nmap <silent><esc><esc> :nohlsearch<CR><esc> <Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'tpope/vim-commentary'
hook_add = '''
    augroup commentary
        autocmd!
        autocmd FileType cpp let b:commentary_format = '// %s'
        autocmd FileType matlab let b:commentary_format = '% %s'
    augroup END
'''

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'haya14busa/vim-asterisk'

[[plugins]]
repo = 'junegunn/fzf'
build = 'bash ./install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
    nnoremap <silent> ,g :GFiles<CR>
    nnoremap <silent> ,G :GFiles?<CR>
    nnoremap <silent> ,h :History<CR>

    "include dotfiles for ag searching via fzf
    command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'ag --hidden --ignore .git -g ""'}), <bang>0)

    command! -bang -nargs=* Ag
        \ call fzf#vim#grep(
        \ 'ag --column --color --hidden --ignore .git '.shellescape(<q-args>), 0,
        \ <bang>0 ? fzf#vim#with_preview('up:60%')
        \         : fzf#vim#with_preview('right:50%', '?'),
        \ <bang>0)

    " Using floating windows of Neovim to start fzf
    if has('nvim')
      let $FZF_DEFAULT_OPTS .= ' --border --margin=0,2'

      function! FloatingFZF()
        let width = float2nr(&columns * 0.9)
        let height = float2nr(&lines * 0.6)
        let opts = { 'relative': 'editor',
                   \ 'row': (&lines - height) / 2,
                   \ 'col': (&columns - width) / 2,
                   \ 'width': width,
                   \ 'height': height }

        let win = nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
        call setwinvar(win, '&winhighlight', 'NormalFloat:Normal')
      endfunction

      let g:fzf_layout = { 'window': 'call FloatingFZF()' }
endif
'''

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'

[[plugins]]
repo = 'lilydjwg/colorizer'
hook_add = '''
    let g:colorizer_maxlines = 500
	let g:colorizer_nomap = 1
'''

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
hook_add = '''
    let g:precious_enable_switch_CursorMoved = {
        \ "*": 0,
        \ "help": 1,
        \ "toml": 1,
    \ }

    augroup precious
        autocmd! *
        autocmd InsertEnter * :PreciousSwitch
        autocmd InsertLeave * :PreciousReset
    augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
hook_add = '''
    nmap <C-j> <Plug>(edgemotion-j)
    nmap <C-k> <Plug>(edgemotion-k)
    vmap <C-j> <Plug>(edgemotion-j)
    vmap <C-k> <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'lambdalisue/gin.vim'

# fern
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
    let g:fern#default_hidden = 1
    let g:fern#scheme#bookmark#store#file = "~/.fern/bookmark.json"
    nmap <silent><leader>t :Fern . -drawer -toggle<CR>

    function! s:init_fern() abort
        nmap <buffer> s <Nop>
        nmap <buffer> fs <Plug>(fern-action-open:select)
        nmap <silent><buffer> fb :Fern bookmark:///<CR>
        nmap <buffer> fc <Plug>(fern-action-cd) :echo "cd to " . getcwd()<CR>
    endfunction

    augroup fern-custom
        autocmd! *
        autocmd FileType fern call s:init_fern()
    augroup END
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
    let g:fern#renderer = "nerdfont"
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
# on_event = 'BufEnter'
hook_add = '''
    imap <C-j> <Plug>(skkeleton-toggle)
    cmap <C-j> <Plug>(skkeleton-toggle)
    call skkeleton#config({
    \   'eggLikeNewline': v:true,
    \   'globalJisyo': "~/.config/skk/SKK-JISYO.L",
    \   'userJisyo': "~/.config/skk/my_jisyo",
    \   'usePopup': v:false,
    \   'keepState': v:true,
    \ })
    call skkeleton#register_kanatable('rom', {
        \ 'jj': 'escape',
    \ })
'''

[[plugins]]
repo = 'goerz/jupytext.vim'
hook_add = '''
    let g:jupytext_fmt = 'py:percent'
    let g:jupytext_filetype_map = {'py': 'python'}
'''

[[plugins]]
repo = 'kmnk/denite-dirmark'
