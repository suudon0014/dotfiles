[[plugins]]
repo = 'Shougo/dein.vim'

#colorscheme start
[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'GertjanReynaert/cobalt2-vim-theme'

[[plugins]]
repo = 'haystackandroid/stellarized'

[[plugins]]
repo = 'haystackandroid/nemo'

[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

[[plugins]]
repo = 'ulwlu/elly.vim'
# colorscheme end

[[plugins]]
repo = 'itchyny/lightline.vim'

#linting and formatting
[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# display match count
[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    nnoremap tjo :TagbarToggle<CR>
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'

[[plugins]]
repo = 'junegunn/fzf'
build = 'bash ./install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'yuki-ycino/fzf-preview.vim'

[[plugins]]
repo = 'lilydjwg/colorizer'
hook_add = '''
    let g:colorizer_maxlines = 500
	let g:colorizer_nomap = 1
'''

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    let g:lsp_async_completion = 1
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_signs_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_virtual_text_enabled = 0
    let g:lsp_highlights_enabled = 0
    let g:lsp_textprop_enabled = 1
    let g:lsp_signs_error = {'text': 'x'}
    let g:lsp_signs_warning = {'text': '!'}
    nnoremap <C-l>d :LspDefinition<CR>
    nnoremap <C-l>f :LspDocumentFormat<CR>
    nnoremap <C-l>h :LspHover<CR>
    nnoremap <C-l>r :LspReferences<CR>

    if executable('clangd')
        augroup lspCppGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cmake'],
                \ 'priority': 20,
            \ })
            autocmd FileType c,cpp,objc,objcpp,cmake setlocal omnifunc=lsp#complete
        augroup END
    endif

    let s:pyls_path = fnamemodify(g:python3_host_prog, ':h') . '/' . 'pyls'
    if executable(s:pyls_path)
        augroup lspPythonGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->[s:pyls_path]},
                \ 'whitelist': ['python'],
                \ 'priority': 20,
            \ })
            autocmd FileType python setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('bash-language-server')
        augroup lspBashGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'bash-lang-server',
                \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
                \ 'whitelist': ['sh'],
                \ 'priority': 20,
                \ })
            autocmd FileType sh setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('vim-language-server')
        augroup lspVimGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'vim-lang-server',
                \ 'cmd': {server_info->['vim-language-server', '--stdio']},
                \ 'whitelist': ['vim'],
                \ 'priority': 20,
                \ })
            autocmd FileType vim setlocal omnifunc=lsp#complete
        augroup END
    endif

    if executable('typescript-language-server')
        augroup lspTsGroup
            autocmd!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'typescript-lang-server',
                \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
                \ 'whitelist': ['javascript', 'javascript.jsx', 'javascriptreact', 'typescript', 'typescript.tsx'],
                \ 'priority': 20,
                \ })
            autocmd FileType typescript setlocal omnifunc=lsp#complete
        augroup END
    endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
    imap <C-Space> <Plug>(asyncomplete_force_refresh)
    let g:asyncomplete_auto_popup = 1
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
hook_add = '''
    let g:asyncomplete_buffer_clear_cache = 0

    augroup asynCompBufferGroup
        autocmd!
        autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
        \ 'name': 'buffer',
        \ 'whitelist': ['*'],
        \ 'blacklist': ['c', 'cpp', 'objc', 'objcpp'],
        \ 'priority': 8,
        \ 'completor': function('asyncomplete#sources#buffer#completor'),
        \ 'config': {
        \ 	'max_buffer_size': 5000000,
        \ },
        \ }))
    augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
hook_add = '''
    augroup asynCompNeosnipGroup
        autocmd!
        autocmd User lsp_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
            \ 'name': 'neosnippet',
            \ 'whitelist': ['*'],
            \ 'priority': 9,
            \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
        \ }))
    augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_add = '''
    augroup asynCompFileGroup
        autocmd!
        autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
        \ 'name': 'file',
        \ 'whitelist': ['*'],
        \ 'priority': 10,
        \ 'completor': function('asyncomplete#sources#file#completor'),
        \ }))
    augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-tags.vim'
hook_add = '''
    augroup asynCompTagsGroup
        autocmd!
        autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
        \ 'name': 'tags',
        \ 'whitelist': ['*'],
        \ 'blacklist': ['c', 'cpp', 'objc', 'objcpp'],
        \ 'priority': 4,
        \ 'completor': function('asyncomplete#sources#tags#completor'),
        \ 'config': {
        \ 	'max_buffer_size': -1,
        \ },
        \ }))
    augroup END
'''

[[plugins]]
repo = 'machakann/asyncomplete-ezfilter.vim'
hook_add = '''
    " remove duplicates
    " function! s:asyncomplete_remove_duplicates_preprocessor(options, matches)
    "     let l:visited = {}
    "     let l:items = []
    "     for [l:source_name, l:matches] in items(a:matches)
    "       for l:item in l:matches['items']
    "         if stridx(l:item['word'], a:options['base']) == 0
    "           if !has_key(l:visited, l:item['word'])
    "             call add(l:items, l:item)
    "             let l:visited[l:item['word']] = 1
    "           endif
    "         endif
    "       endfor
    "     endfor
    "     call asyncomplete#preprocess_complete(a:options, l:items)
    " endfunction
    " let g:asyncomplete_preprocessor = [function('s:asyncomplete_remove_duplicates_preprocessor')]

    " ignore case
    let g:asyncomplete_preprocessor = [function('asyncomplete#preprocessor#ezfilter#filter')]
    let g:asyncomplete#preprocessor#ezfilter#filter#config = {}
    let g:asyncomplete#preprocessor#ezfilter#filter#config['*'] =
                \ {ctx, items -> filter(items, 'ctx.match(v:val.word)')}
'''

[[plugins]]
repo = 'tsufeki/asyncomplete-fuzzy-match'
build = 'cargo build --release'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
hook_add = '''
    map <C-j> <Plug>(edgemotion-j)
    map <C-k> <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
    let g:fern#default_hidden = 1
    nmap <silent><leader>t :Fern . -drawer -toggle<CR>

    function! s:init_fern() abort
        nmap <buffer> s <Nop>
        nmap <buffer> fs <Plug>(fern-action-open:select)
        nmap <silent><buffer> fb :Fern bookmark:///<CR>
        nmap <buffer> fc <Plug>(fern-action-cd) :echo "cd to " . getcwd()<CR>
    endfunction

    augroup fern-custom
        autocmd! *
        autocmd FileType fern call s:init_fern()
    augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-devicons.vim'
hook_add = '''
    let g:fern#renderer = "devicons"
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'
