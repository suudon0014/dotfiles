[[plugins]]
repo = 'Robitx/gp.nvim'
on_cmd = ["GpAppend", "GpChatNew", "GpChatFinder", "GpRewrite", "GpPrepend", "GpImplement", "GpTranslateToJp", "GpTranslateToEn", "GpNew", "GpVnew", "GpExplainCode", "GpCreateCommitMessage", "GpRefactor", "GpChatPaste"]
lua_add = '''
-- key mappings
local function keymapOptions(desc)
    return {
        noremap = true,
        silent = true,
        nowait = true,
        desc = "LLM prompt " .. desc,
    }
end

local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local code_completion_prompt = LoadTextFile("codeCompletion.md")
vim.keymap.set("v", "<C-g>c", ":<C-u>'<,'>GpAppend " .. code_completion_prompt .. "<CR>", keymapOptions("Completion"))

vim.keymap.set({"n", "i"}, "<C-g>n", "<Cmd>GpChatNew<CR>", keymapOptions("New Chat"))
vim.keymap.set("v", "<C-g>n", ":<C-u>'<,'>GpChatNew<CR>", keymapOptions("New Chat"))

vim.keymap.set({"n", "i"}, "<C-g>f", "<Cmd>GpChatFinder<CR>", keymapOptions("Chat Finder"))

vim.keymap.set({"n", "i"}, "<C-g>rw", "<Cmd>GpRewrite<CR>", keymapOptions("Rewrite"))
vim.keymap.set("v", "<C-g>rw", ":<C-u>'<,'>GpRewrite<CR>", keymapOptions("Rewrite"))

vim.keymap.set({"n", "i"}, "<C-g>a", "<Cmd>GpAppend<CR>", keymapOptions("Append"))
vim.keymap.set("v", "<C-g>a", ":<C-u>'<,'>GpAppend<CR>", keymapOptions("Append"))

vim.keymap.set({"n", "i"}, "<C-g>p", "<Cmd>GpPrepend<CR>", keymapOptions("Prepend"))
vim.keymap.set("v", "<C-g>p", ":<C-u>'<,'>GpPrepend<CR>", keymapOptions("Prepend"))

vim.keymap.set("v", "<C-g>i", ":<C-u>'<,'>GpImplement<CR>", keymapOptions("Implement"))

vim.keymap.set("v", "<C-g>tj", ":<C-u>'<,'>GpTranslateToJp<CR>", keymapOptions("Translate to JP"))
vim.keymap.set("v", "<C-g>te", ":<C-u>'<,'>GpTranslateToEn<CR>", keymapOptions("Translate to EN"))

vim.keymap.set({"n", "i"}, "<C-g>s", "<Cmd>GpNew<CR>", keymapOptions("New with split"))
vim.keymap.set("v", "<C-g>s", ":<C-u>'<,'>GpNew<CR>", keymapOptions("New with split"))

vim.keymap.set({"n", "i"}, "<C-g>v", "<Cmd>GpVnew<CR>", keymapOptions("Vnew with vsplit"))
vim.keymap.set("v", "<C-g>v", ":<C-u>'<,'>GpVnew<CR>", keymapOptions("Vnew with vsplit"))

vim.keymap.set("v", "<C-g>e", ":<C-u>'<,'>GpExplainCode<CR>", keymapOptions("Explain Code"))
vim.keymap.set("v", "<C-g>g", ":<C-u>'<,'>GpCreateCommitMessage<CR>", keymapOptions("Commit Message"))
vim.keymap.set("v", "<C-g>rf", ":<C-u>'<,'>GpRefactor<CR>", keymapOptions("Refactor"))

vim.keymap.set("v", "<C-g>y", ":<C-u>'<,'>GpChatPaste<CR>", keymapOptions("Paste to Chat"))
'''
lua_source = '''
local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local general_system_prompt = LoadTextFile("generalSystemPrompt.md")

local conf = {
    chat_dir = os.getenv('HOME') .. '/OneDrive/gp/chats',
    providers = {
        googleai = {
            endpoint = "https://generativelanguage.googleapis.com/v1beta/models/{{model}}:streamGenerateContent?key={{secret}}",
            secret = os.getenv("GEMINI_API_KEY"),
        },
        ollama = {
            endpoint = "http://localhost:11434/v1/chat/completions",
        },
    },
    agents = {
        {
            name = "Gemini-Pro",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-2.5-pro", top_k = 40},
            system_prompt = general_system_prompt,
        },
        {
            name = "Gemini-Flash",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-2.5-flash", top_k = 40},
            system_prompt = general_system_prompt,
        },
    },
    hooks = {
        TranslateToJp = function(gp, params)
            local prompt = LoadTextFile("translateJp.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        TranslateToEn = function(gp, params)
            local prompt = LoadTextFile("translateEn.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        ExplainCode = function(gp, params)
            local prompt = LoadTextFile("explainCode.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        CreateCommitMessage = function(gp, params)
            local prompt = LoadTextFile("createCommitMessage.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        Refactor = function(gp, params)
            local prompt = LoadTextFile("refactor.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.append, agent, prompt)
        end,
    },
}
require('gp').setup(conf)

local gpNvimScriptFilePath = os.getenv('HOME') .. '/dotfiles/.vim/llm_prompt/gp_nvim_func.vim'
vim.api.nvim_command("source " .. gpNvimScriptFilePath)
'''

[[plugins]]
repo = 'olimorris/codecompanion.nvim'
on_source = ['mcphub.nvim']
on_cmd = ['CodeCompanion', 'CodeCompanionChat', 'CodeCompanionActions', 'CodeCompanionCmd']
lua_add = '''
vim.keymap.set('ca', 'cci', 'CodeCompanion')
vim.keymap.set('ca', 'ccc', 'CodeCompanionChat')
vim.keymap.set('ca', 'cct', 'CodeCompanionChat Toggle')
vim.keymap.set('ca', 'cca', 'CodeCompanionActions')
vim.keymap.set('ca', 'ccx', 'CodeCompanionCmd')
'''
lua_source = '''
local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local default_system_prompt = require('codecompanion.config').opts.system_prompt

require('codecompanion').setup({
    adapters = {
        gemini = function()
            return require('codecompanion.adapters').extend('gemini', {
                schema = {
                    model = {
                        default = "gemini-2.5-flash",
                        choices = {
                            "gemini-2.5-flash",
                            "gemini-2.5-pro",
                        },
                    },
                },
            })end,
    },
    strategies = {
        chat = {adapter = "gemini",},
        inline = {adapter = "gemini",},
        agent = {adapter = "gemini",},
    },
    opts = {
        system_prompt = function (opts)
            local my_system_prompt = LoadTextFile("generalSystemPrompt.md")
            return default_system_prompt(opts) .. '\n\n' .. my_system_prompt
        end,
        language = "Japanese",
    },
    display = {
        chat = {
            auto_scroll = true,
            show_header_separator = true,
        },
    },
    extensions = {
        mcphub = {
            callback = "mcphub.extensions.codecompanion",
            opts = {
                show_result_in_chat = false,
                make_vars = true,
                make_slash_commands = true,
            },
        },
    },
})
'''

[[plugins]]
repo = 'yetone/avante.nvim'
hook_post_update = 'pwsh -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false'
build = 'pwsh -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false'
on_source = ['mcphub.nvim']
on_cmd = ['AvanteAsk', 'AvanteChat', 'AvanteEdit', 'AvanteFocus', 'AvanteRefresh', 'AvanteShowRepoMap', 'AvanteToggle']
lua_add = '''
local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<Leader>aa', '<Cmd>AvanteAsk<CR>', opts)
vim.keymap.set('n', '<Leader>af', '<Cmd>AvanteFocus<CR>', opts)
vim.keymap.set('n', '<Leader>ar', '<Cmd>AvanteRefresh<CR>', opts)
vim.keymap.set('n', '<Leader>aR', '<Cmd>AvanteShowRepoMap<CR>', opts)
vim.keymap.set('n', '<Leader>at', '<Cmd>AvanteToggle<CR>', opts)
'''
lua_source = '''
require('avante_lib').load()
require('avante').setup({
    provider = "gemini",
    auto_suggestions_provider = "gemini",
    cursor_applying_provider = "gemini",
    behavior = {
        auto_suggestions = false,
        auto_set_highlight_group = true,
        auto_set_keymaps = true,
        auto_apply_diff_after_generation = true,
        enable_cursor_planning_mode = true,
    },
    providers = {
        gemini = {model = "gemini-2.5-flash"},
        gemini_2_5_flash = {
            __inherited_from = "gemini",
            model = "gemini-2.5-flash",
        },
        gemini_2_5_pro = {
            __inherited_from = "gemini",
            model = "gemini-2.5-pro",
        },
    },
    system_prompt = function ()
        local hub = require("mcphub").get_hub_instance()
        return hub:get_active_servers_prompt()
    end,
    custom_tools = function ()
        return {
            require("mcphub.extensions.avante").mcp_tool(),
        }
    end,
})
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
on_source = ['avante.nvim', 'codecompanion.nvim', 'gp.nvim', 'mcphub.nvim', 'mason.nvim']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_source = ['avante.nvim', 'codecompanion.nvim', 'mcphub.nvim']

[[plugins]]
repo = 'MunifTanjim/nui.nvim'
on_source = ['avante.nvim', 'codecompanion.nvim']

[[plugins]]
repo = 'ravitemer/mcphub.nvim'
build = 'pnpm install -g mcp-hub@latest'
on_cmd = ["MCPHub"]
on_source = ['avante.nvim', 'codecompanion.nvim']
lua_add = '''
vim.keymap.set("n", "<Leader>m", ":MCPHub<CR>", {noremap = true, silent = true, nowait = true, desc = "Open McpHub"})
'''
lua_source = '''
require("mcphub").setup({
    extensions = {
        avante = {
            make_slash_commands = true,
        },
    }
})
'''

