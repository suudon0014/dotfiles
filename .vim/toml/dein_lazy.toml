[[plugins]]
repo = 'Shougo/dein.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
lua_source = '''
    local leximaAuGroup = vim.api.nvim_create_augroup('leximaAuGroup', {})
    vim.api.nvim_create_autocmd({'FileType'}, {
        pattern = 'ddu-ff-filter',
        callback = function() vim.b.lexima_disabled = 1 end,
        group = leximaAuGroup,
    })

    vim.fn['lexima#add_rule']({char = ',', input = ',<Space>'})
    vim.fn['lexima#add_rule']({at = [[, \%#]], char = '<Enter>', input = '<BS><Enter>'})

    vim.fn['lexima#add_rule']({at = [[<\%#]], char = '>', input ='', input_after = '>'})
    vim.fn['lexima#add_rule']({at = [[\%#>]], char = '>', leave = '>'})
    vim.fn['lexima#add_rule']({at = [[<\%#>]], char = '<BS>', input ='<BS>', delete = 1})

    vim.fn['lexima#add_rule']({at = [[^\s*\%#$]], char = '-', input ='- ', filetype = 'markdown'})
    vim.fn['lexima#add_rule']({at = [[^\s*\%#$]], char = '*', input ='* ', filetype = 'markdown'})
    vim.fn['lexima#add_rule']({at = [[^- \%#$]], char = '-', input ='<BS>-', filetype = 'markdown'})
    vim.fn['lexima#add_rule']({at = [[^- \%#$]], char = '>', input ='<BS>>', filetype = 'markdown'})
    vim.fn['lexima#add_rule']({at = [[^\s*\* \%#$]], char = '*', input ='<BS>*', filetype = 'markdown'})
'''

[[plugins]]
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_event = ['CursorMoved']
lua_source = '''
    vim.g.linediff_first_buffer_command = 'leftabove new'
    vim.g.linediff_second_buffer_command = 'rightbelow vertical new'
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
lua_source = '''
    vim.g.vimtex_compiler_latexmk = {
        build_dir = '',
        callback = 1,
        continuous = 1,
        executable = 'latexmk',
        hooks = {},
        options = {
            '-pdfdvi',
            '-verbose',
            '-file-line-error',
            '-synctex=1',
            '-interaction=nonstopmode',
        }
    }
    vim.keymap.set('n', '<Leader>tc', '<Plug>(vimtex-compile)', {remap = true})
'''

[[plugins]]
repo = 'mason-org/mason.nvim'
on_event = ['CursorHold', 'InsertEnter', 'BufReadPost', 'BufNewFile']
on_cmd = ['Mason', 'MasonInstall', 'MasonUninstall', 'MasonUninstallAll', 'MasonLog']
on_source = ['ddc-source-lsp']

[[plugins]]
repo = 'mason-org/mason-lspconfig.nvim'
depends = ['nvim-lspconfig']
on_source = ['mason.nvim']

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = ['mason.nvim']
[plugins.ftplugin]
lua_lspinfo = '''
    vim.keymap.set('n', 'q', vim.cmd.close, {remap = false, buffer = true, silent = true})
'''

[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_source = ['mason.nvim']

[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = ['VimEnter']
lua_source = '''
    vim.g.denops_server_addr = '127.0.0.1:32123'
    vim.g["denops#debug"] = 0
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = ['ddc.vim']
depends = ['denops.vim']
lua_source = '''
    vim.fn['signature_help#enable']()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = ['ddc.vim']
depends = ['denops.vim']
lua_source = '''
    vim.fn['popup_preview#enable']()

    local popupPreviewAuGroup = vim.api.nvim_create_augroup('popupPreviewAuGroup', {})
    vim.api.nvim_create_autocmd({'BufEnter'}, {
        pattern = {'*.cpp', "*.h"},
        callback = function() vim.fn['popup_preview#disable']() end,
        group = popupPreviewAuGroup,
    })
    vim.api.nvim_create_autocmd({'BufLeave'}, {
        pattern = {'*.cpp', "*.h"},
        callback = function() vim.fn['popup_preview#enable']() end,
        group = popupPreviewAuGroup,
    })
'''

[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_map = ['<Plug>(Translate']
depends = ['denops.vim']
lua_add = '''
    vim.keymap.set({'n', 'v'}, '<Leader>tr', '<Plug>(Translate)', {remap = true})
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
on_source = ['lualine.nvim']

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = 'ga'
lua_source = '''
    vim.keymap.set({'n', 'x'}, 'ga', '<Plug>(EasyAlign)', {remap = true, desc = 'EasyAlign'})
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim']

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = ['ddc.vim']
lua_source = '''
    vim.keymap.set({'i', 's'}, '<C-k>', function()
        if vim.fn['vsnip#expandable']() == 1 then
            return '<Plug>(vsnip-expand)'
        else
            return '<C-k>'
        end
    end, {expr = true, remap = true, desc = 'vsnip-expand'})

    vim.keymap.set({'i', 's'}, '<C-f>', function()
        if vim.fn['vsnip#jumpable'](1) == 1 then
            return '<Plug>(vsnip-jump-next)'
        else
            return '<C-f>'
        end
    end, {expr = true, remap = true, desc = 'vsnip-jump-next'})

    vim.keymap.set({'i', 's'}, '<C-b>', function()
        if vim.fn['vsnip#jumpable'](-1) == 1 then
            return '<Plug>(vsnip-jump-prev)'
        else
            return '<C-b>'
        end
    end, {expr = true, remap = true, desc = 'vsnip-jump-prev'})
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = ['vim-vsnip']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    vim.g.precious_enable_switch_CursorMoved = {
        ['*'] = 0,
        help = 1,
        toml = 1,
        ['ddt-shell'] = 1,
    }

    local preciousAuGroup = vim.api.nvim_create_augroup('preciousAuGroup', {})
    vim.api.nvim_create_autocmd({'InsertEnter'}, {
        pattern = {'*'},
        command = 'PreciousSwitch',
        group = preciousAuGroup,
    })
    vim.api.nvim_create_autocmd({'InsertLeave'}, {
        pattern = {'*'},
        command = 'PreciousReset',
        group = preciousAuGroup,
    })
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = ['vim-precious']

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = ['<C-j>', '<C-k>']
lua_source = '''
    vim.keymap.set({'n', 'v'}, '<C-j>', '<Plug>(edgemotion-j)', {remap = true, desc = 'edgemotion-j'})
    vim.keymap.set({'n', 'v'}, '<C-k>', '<Plug>(edgemotion-k)', {remap = true, desc = 'edgemotion-k'})
'''

[[plugins]]
repo = 'lambdalisue/vim-gin'
on_map = '<Plug>(gin-'
on_cmd = ['Gin', 'GinBuffer', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus', 'ShowGitDashboard']
on_func = 'gin#'
lua_source = '''
    vim.g.gin_log_default_args = {'--graph', '--oneline', '--all', '--date=short', '--decorate=short'}

    local function show_git_dashboard()
        vim.cmd.tabnew()
        vim.cmd.GinStatus('++opener=topleft split')
        vim.cmd.wincmd('j')
        vim.cmd.GinBranch()
        vim.cmd.GinLog('++opener=botright vsplit')
    end
    vim.api.nvim_create_user_command('ShowGitDashboard', show_git_dashboard, {})
'''

[plugins.ftplugin]
lua_gin-branch = '''
    vim.keymap.set('n', 'r', vim.cmd.edit({bang = true}), {remap = false, buffer = true, silent = true, desc = 'edit'})
    vim.keymap.set('n', 'q', vim.cmd.quit(), {remap = false, buffer = true, silent = true, desc = 'quit'})
'''
lua_gin-diff = '''
    vim.keymap.set('n', 'r', vim.cmd.edit({bang = true}), {remap = false, buffer = true, silent = true, desc = 'edit'})
    vim.keymap.set('n', 'q', vim.cmd.quit(), {remap = false, buffer = true, silent = true, desc = 'quit'})
'''
lua_gin-log = '''
    vim.keymap.set('n', 'r', vim.cmd.edit({bang = true}), {remap = false, buffer = true, silent = true, desc = 'edit'})
    vim.keymap.set('n', 'q', vim.cmd.quit(), {remap = false, buffer = true, silent = true, desc = 'quit'})
    vim.keymap.set('n', 'gsh', '<Plug>(gin-action-show)', {remap = false, buffer = true, desc = 'gin-action-show'})
    vim.keymap.set('n', 'gsw', '<Plug>(gin-action-switch)', {remap = false, buffer = true, desc = 'gin-action-switch'})
'''
lua_gin-status = '''
    vim.keymap.set('n', 'r', vim.cmd.edit({bang = true}), {remap = false, buffer = true, silent = true, desc = 'edit'})
    vim.keymap.set('n', 'q', vim.cmd.quit(), {remap = false, buffer = true, silent = true, desc = 'quit'})
    vim.keymap.set('n', 'e', '<Plug>(gin-action-edit)', {remap = false, buffer = true, desc = 'gin-action-edit'})
'''

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

[[plugins]]
repo = 'kshenoy/vim-signature'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    require('hlslens').setup()

    vim.keymap.set('n', 'n', function()
        vim.cmd.normal({args = {vim.v.count1 .. 'n'}, bang = true})
        require('hlslens').start()
    end, opts)

    vim.keymap.set('n', 'N', function()
        vim.cmd.normal({args = {vim.v.count1 .. 'N'}, bang = true})
        require('hlslens').start()
    end, opts)

    local opts = {noremap = true, silent = true}
    vim.keymap.set({'n', 'x'}, '*', "<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>")
    vim.keymap.set({'n', 'x'}, '#', "<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>")
    vim.keymap.set({'n', 'x'}, 'g*', "<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>")
    vim.keymap.set({'n', 'x'}, 'g#', "<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>")
    vim.keymap.set('n', '<Leader>c', vim.cmd.nohlsearch, opts)
    vim.keymap.set('n', '<esc><esc>', function()
        vim.cmd.nohlsearch()
        return '<Esc>'
    end, opts)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_source = ['nvim-hlslens']

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = ['CursorMoved']

[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    vim.g.indentLine_setConceal = 0
    vim.g.indentLine_char = 'Â¦'
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    vim.g.extra_whitespace_ignored_filetypes = {'', 'ddu-filer', 'ddu-ff', 'mason', 'lspsagafinder'}
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    local commentaryAuGroup = vim.api.nvim_create_augroup('commentaryAuGroup', {})
    vim.api.nvim_create_autocmd({'FileType'}, {
        pattern = {'cpp'},
        callback = function() vim.b.commentary_format = '// %s' end,
        group = commentaryAuGroup,
    })
    vim.api.nvim_create_autocmd({'FileType'}, {
        pattern = {'matlab'},
        callback = function() vim.b.commentary_format = '% %s' end,
        group = commentaryAuGroup,
    })
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    vim.g.EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'uga-rosa/ccc.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    require('ccc').setup({
        highlighter = {
            auto_enable = true,
        },
    })
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    vim.cmd.source('~/dotfiles/.vim/lua/gitsigns.lua')
    vim.keymap.set('n', '<Leader>gsb', require('gitsigns').stage_buffer, {desc = 'buffer'})
    vim.keymap.set({'n', 'v'}, '<Leader>gsh', require('gitsigns').stage_hunk, {desc = 'hunk(toggle)'})
    vim.keymap.set('n', '<Leader>grb', require('gitsigns').reset_buffer, {desc = 'buffer'})
    vim.keymap.set({'n', 'v'}, '<Leader>grh', require('gitsigns').reset_hunk, {desc = 'hunk'})
    vim.keymap.set('n', '<Leader>gdc', function() require('gitsigns').diffthis('~1') end, {desc = 'last commit'})
    vim.keymap.set('n', '<Leader>gdi', require('gitsigns').diffthis, {desc = 'index'})
    vim.keymap.set('n', '<Leader>gtb', require('gitsigns').toggle_current_line_blame, {desc = "blame (line)"})
    vim.keymap.set('n', '<Leader>gtl', require('gitsigns').toggle_linehl, {desc = "line highlight"})
    vim.keymap.set('n', '<Leader>gtn', require('gitsigns').toggle_numhl, {desc = "num highlight"})
    vim.keymap.set('n', '<Leader>gts', require('gitsigns').toggle_signs, {desc = "signs"})
    vim.keymap.set('n', '<Leader>gtw', require('gitsigns').toggle_word_diff, {desc = "word diff"})
    vim.keymap.set('n', '<Leader>gb', function() require('gitsigns').blame_line({full=true}) end, {desc = "blame(full)"})
    vim.keymap.set('n', '<Leader>gp', require('gitsigns').preview_hunk, {desc = "preview"})
'''

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_cmd = ['StartupTime']
lua_source = '''
    vim.g.startuptime_tries = 10
'''

[[plugins]]
repo = 'skanehira/vsession'
on_cmd = ['DeleteSession', 'LoadSession', 'SaveSession']
lua_add = '''
    vim.keymap.set('n', '<Leader>s', '<Nop>', {remap = false})
    vim.keymap.set('n', '<Leader>sd', vim.cmd.DeleteSession, {desc = 'delete'})
    vim.keymap.set('n', '<Leader>sl', vim.cmd.LoadSession, {desc = 'load'})
    vim.keymap.set('n', '<Leader>ss', vim.cmd.SaveSession, {desc = 'save'})
'''
lua_post_source = '''
    vim.g.vsession_save_last_on_leave = 0
    vim.g.vsession_ui = 'fzf'
'''
[plugins.ftplugin]
lua_vsession-quickpick = '''
    vim.keymap.set('n', 'q', vim.cmd.close, {remap = false, buffer = true, silent = true})
'''
lua_vsession-quickpick-filter = '''
    vim.keymap.set('n', 'q', '<Plug>(vsession-quickpick-cancel)', {remap = true, buffer = true, silent = true})
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'help'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = ['mason.nvim']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_func = 'quickrun#'
lua_add = '''
    vim.keymap.set('n', ',q', vim.cmd.QuickRun, {remap = false, silent = true, desc = 'QuickRun'})
'''

[[plugins]]
repo = 'simrat39/rust-tools.nvim'
on_ft = ['rust']

# [[plugins]]
# repo = 'epwalsh/obsidian.nvim'
# on_source = 'nvim-cmp'
# lua_source = '''
#     require('obsidian').setup({
#         dir = '~/obsidian_vault',
#         notes_subdir = '01_Inbox',
#         daily_notes = {
#             folder = '02_Daily',
#         },
#         completion = {
#             nvim_cmp = false,
#         },
#     })
# '''

[[plugins]]
repo = 'itchyny/vim-qfedit'
on_ft = ['qf']

[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = ['denops.vim']
on_source = ['kensaku-search.vim']

[[plugins]]
repo = 'lambdalisue/kensaku-search.vim'
depends = ['kensaku.vim']
on_source = ['pum.vim']

[[plugins]]
repo = 'shellRaining/hlchunk.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
require('hlchunk').setup({})
'''

[[plugins]]
repo = 'mbbill/undotree'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'stevearc/oil.nvim'
on_map = '<Leader>o'
on_cmd = 'Oil'
lua_source = '''
    require('oil').setup({
        view_options = {
            show_hidden = true
    }})
    vim.keymap.set("n", "<Leader>o", vim.cmd.Oil, {desc = "Open parent directory"})
'''

[[plugins]]
repo = 'folke/which-key.nvim'
on_event = ['KeyInputPre', 'CursorHold']
lua_source = '''
local wk = require('which-key')
wk.add({
    {"<Leader>g", group = "gitsigns", mode = {"n", "v"}},
    {"<Leader>gs", group = "stage", mode = {"n", "v"}},
    {"<Leader>gr", group = "reset", mode = {"n", "v"}},
    {"<Leader>gd", group = "diff"},
    {"<Leader>gt", group = "toggle"},

    {"<Leader>s", group = "session"},

    {"<C-g>", group = "gp.nvim", mode = {"n", "v"}},
    {"<C-g>t", group = "translate (gp.nvim)", mode = {"v"}},

    {",a", group = "ddu (arglist)"},
    {",f", group = "ddu (file)"},
    {",g", group = "ddu (git)"},
    {",o", group = "ddu (obsidian)"},
    {",r", group = "ddu (grep)"},

    {"<Leader>t", group = "translate (google)", mode = {"n", "v"}},
    {"<C-l>", group = "LSP", mode = {"n", "v"}},
})
vim.keymap.set("n", "<Leader>?", function() require('which-key').show({global = false}) end, {desc = "Buffer Local Keymaps (which-key)"})
'''

[[plugins]]
repo = 'Shougo/ddt.vim'
on_func = ['ddt#']
lua_source = '''
    -- vim.fn['ddt#custom#patch_global']({
    --     ui = 'shell',
    --     uiParams = {
    --         shell = {
    --             prompt = '>',
    --             promptPattern = '%w*> %?',
    --             userPrompt = vim.fn.fnamemodify(vim.fn.getcwd(), ":~"),
    --             shellHistoryPath = vim.fn.expand('~') .. '\\.cache\\ddt_shellhist.log',
    --         },
    --         terminal = {
    --             command = {'zsh'},
    --             promptPattern = if vim.fn.has('win32') == 1 then '%f%+>' else '%w*%% %?' end,
    --         },
    --     },
    -- })
'''

[[plugins]]
repo = 'Shougo/ddt-ui-terminal'
on_source = ['ddt.vim']

[[plugins]]
repo = 'Shougo/ddt-ui-shell'
on_source = ['ddt.vim']
[plugins.ftplugin]
lua_ddt-shell = '''
    vim.keymap.set({'n', 'i'}, '<CR>', function() vim.fn['ddt#ui#do_action']('executeLine') end, {remap = false, buffer = true, desc = 'executeLine'})
    vim.keymap.set('n', '<C-n>', function() vim.fn['ddt#ui#do_action']('nextPrompt') end, {remap = false, buffer = true, desc = 'nextPrompt'})
    vim.keymap.set('n', '<C-p>', function() vim.fn['ddt#ui#do_action']('previousPrompt') end, {remap = false, buffer = true, desc = 'previousPrompt'})
    vim.keymap.set('n', '<C-y>', function() vim.fn['ddt#ui#do_action']('pastePrompt') end, {remap = false, buffer = true, desc = 'pastePrompt'})
    vim.keymap.set('i', '<C-c>', function() vim.fn['ddt#ui#do_action']('terminate') end, {remap = false, buffer = true, desc = 'terminate'})
'''

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
depends = ['denops.vim']
on_cmd = ['GhostStart']
on_func = ['ghosttext#']
lua_post_source = '''
    tmp_table = {}
    tmp_table["gemini.google.com"] = "markdown"
    tmp_table["aistudio.google.com"] = "markdown"
    vim.g["dps_ghosttext#ftmap"] = vim.tbl_deep_extend("keep", vim.g["dps_ghosttext#ftmap"], tmp_table)
'''

