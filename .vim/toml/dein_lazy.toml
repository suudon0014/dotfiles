[[plugins]]
repo = 'Shougo/dein.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hook_source = '''
    augroup autoclose
        autocmd! *
        autocmd FileType ddu-ff-filter let b:lexima_disabled = 1
    augroup END

    call lexima#add_rule(#{char: ',', input: ',<Space>'})
    call lexima#add_rule(#{at: ', \%#', char: '<Enter>', input: '<BS><Enter>'})

    call lexima#add_rule(#{at: '<\%#', char: '>', input:'', input_after: '>'})
    call lexima#add_rule(#{at: '\%#>', char: '>', leave: '>'})
    call lexima#add_rule(#{at: '<\%#>', char: '<BS>', input:'<BS>', delete: 1})

    call lexima#add_rule(#{at: '^\s*\%#$', char: '-', input:'- ', filetype: 'markdown'})
    call lexima#add_rule(#{at: '^\s*\%#$', char: '*', input:'* ', filetype: 'markdown'})
    call lexima#add_rule(#{at: '^- \%#$', char: '-', input:'<BS>-', filetype: 'markdown'})
    call lexima#add_rule(#{at: '^- \%#$', char: '>', input:'<BS>>', filetype: 'markdown'})
    call lexima#add_rule(#{at: '^\s*\* \%#$', char: '*', input:'<BS>*', filetype: 'markdown'})
'''

[[plugins]]
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_event = ['CursorMoved']
hook_source = '''
    let g:linediff_first_buffer_command = 'leftabove new'
    let g:linediff_second_buffer_command = 'rightbelow vertical new'
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
    let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_source = '''
    let g:vimtex_compiler_latexmk = #{
        \ build_dir : '',
        \ callback : 1,
        \ continuous : 1,
        \ executable : 'latexmk',
        \ hooks : [],
        \ options : [
        \   '-pdfdvi',
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ],
        \}
    nmap <leader>tc <Plug>(vimtex-compile)
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_event = ['CursorHold', 'InsertEnter', 'BufReadPost', 'BufNewFile']
on_cmd = ['Mason', 'MasonInstall', 'MasonUninstall', 'MasonUninstallAll', 'MasonLog']

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig']
on_source = ['mason.nvim']

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = ['mason.nvim']
[plugins.ftplugin]
lspinfo = '''
    nnoremap <buffer><silent> q :close<CR>
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
depends = ['ddc-source-lsp']
on_source = ['nvim-lspconfig', 'ddc.vim']

[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_source = ['mason.nvim']

[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = ['VimEnter']
hook_source = '''
    let g:denops_server_addr = '127.0.0.1:32123'
    let g:denops#server#deno_args = ['-q', '--no-lock', '--unstable-kv', '-A']
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = ['denops.vim']
hook_source = '''
    call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = ['denops.vim']
hook_source = '''
    call popup_preview#enable()
'''

[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_source = ['denops.vim']
hook_source = '''
    nmap <Leader>tr <Plug>(Translate)
    vmap <Leader>tr <Plug>(Translate)
'''

[[plugins]]
repo = 'folke/trouble.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    nnoremap <C-l>t :TroubleToggle<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_source = ['trouble.nvim']

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_source = ['trouble.nvim']

[[plugins]]
repo = 'Shougo/deol.nvim'
on_map = '<Plug>(deol_'
on_cmd = ['Deol', 'DeolCd', 'DeolEdit']
hook_source = '''
    let g:deol#enable_ddc_completion = v:true
    let g:deol#floating_border = 'single'
    tnoremap <Esc> <C-\><C-n>

    function! s:set_deol_win_pos() abort
        let s:deol_win_pos = #{
            \ winWidth: float2nr(&columns * 0.9),
            \ winCol: float2nr(&columns * 0.05),
            \ winHeight: float2nr(&lines * 0.6),
            \ winRow: float2nr(&lines * 0.2),
        \ }
    endfunction

    augroup AutoResizeDeolWinPos
        autocmd!
        autocmd VimEnter,VimResized * call s:set_deol_win_pos()
    augroup END

    nnoremap <silent>,z :<C-u>call <SID>deol_zsh()<CR>
    function! s:deol_zsh() abort
        execute 'Deol zsh -split=floating -start-insert=v:false -edit=v:true' .
                \ ' -winwidth=' . s:deol_win_pos['winWidth']
                \ ' -wincol=' . s:deol_win_pos['winCol']
                \ ' -winheight=' . s:deol_win_pos['winHeight']
                \ ' -winrow=' . s:deol_win_pos['winRow']
    endfunction
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = 'CursorMoved'
hook_source = '''
    nmap ga <Plug>(EasyAlign)
    xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim']

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = ['ddc.vim']
hook_source = '''
    imap <expr> <C-k> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-k>'
    smap <expr> <C-k> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-k>'
    imap <expr> <C-f> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<C-f>'
    smap <expr> <C-f> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<C-f>'
    imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
    smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
    "let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = ['vim-vsnip']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    let g:precious_enable_switch_CursorMoved = {
        \ '*': 0,
        \ 'help': 1,
        \ 'toml': 1,
    \ }

    augroup precious
        autocmd! *
        autocmd InsertEnter * :PreciousSwitch
        autocmd InsertLeave * :PreciousReset
    augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = ['vim-precious']

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_event = 'CursorMoved'
hook_source = '''
    nmap <C-j> <Plug>(edgemotion-j)
    nmap <C-k> <Plug>(edgemotion-k)
    vmap <C-j> <Plug>(edgemotion-j)
    vmap <C-k> <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'lambdalisue/vim-gin'
on_map = '<Plug>(gin-'
on_cmd = ['Gin', 'GinBuffer', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus', 'ShowGitDashboard']
on_func = 'gin#'
hook_source = '''
    let g:gin_log_default_args = ['--graph', '--oneline', '--all', '--date=short', '--decorate=short']

    command! ShowGitDashboard call s:show_git_dashboard()
    function! s:show_git_dashboard()
        tabnew
        GinStatus ++opener=topleft\ split
        wincmd j
        GinBranch
        GinLog ++opener=botright\ vsplit
    endfunction
'''
[plugins.ftplugin]
gin-branch = '''
    nnoremap <buffer><silent> r :e!<CR>
    nnoremap <buffer><silent> q :q<CR>
'''
gin-diff = '''
    nnoremap <buffer><silent> r :e!<CR>
    nnoremap <buffer><silent> q :q<CR>
'''
gin-log = '''
    nnoremap <buffer><silent> r :e!<CR>
    nnoremap <buffer> gsh <Plug>(gin-action-show)
    nnoremap <buffer> gsw <Plug>(gin-action-switch)
    nnoremap <buffer><silent> q :q<CR>
'''
gin-status = '''
    nnoremap <buffer><silent> r :e!<CR>
    nnoremap <buffer> e <Plug>(gin-action-edit)
    nnoremap <buffer><silent> q :q<CR>
'''

[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

[[plugins]]
repo = 'kshenoy/vim-signature'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
require('hlslens').setup()
local opts = {noremap = true, silent = true}
vim.keymap.set('n', 'n', "<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>", opts)
vim.keymap.set('n', 'N', "<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>", opts)
vim.keymap.set({'n', 'x'}, '*', "<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>")
vim.keymap.set({'n', 'x'}, '#', "<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>")
vim.keymap.set({'n', 'x'}, 'g*', "<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>")
vim.keymap.set({'n', 'x'}, 'g#', "<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>")
vim.keymap.set('n', '<Leader>c', ':nohlsearch<CR>', opts)
vim.keymap.set('n', '<esc><esc>', ':nohlsearch<CR><esc>', opts)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_source = ['nvim-hlslens']

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = ['CursorMoved']

[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    let g:indentLine_setConceal = 0
    let g:indentLine_char = 'Â¦'
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    let g:extra_whitespace_ignored_filetypes = ['', 'ddu-filer', 'ddu-ff', 'mason', 'lspsagafinder']
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    augroup commentary
        autocmd!
        autocmd FileType cpp let b:commentary_format = '// %s'
        autocmd FileType matlab let b:commentary_format = '% %s'
    augroup END
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = '''
    let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
    require('colorizer').setup()
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
hook_source = 'source ~/dotfiles/.vim/lua/gitsigns.lua'

[[plugins]]
repo = 'dstein64/vim-startuptime'
on_cmd = ['StartupTime']
hook_source = '''
    let g:startuptime_tries = 10
'''

[[plugins]]
repo = 'skanehira/vsession'
on_event = 'CursorHold'
hook_post_source = '''
    let g:vsession_save_last_on_leave = 0
    let g:vsession_ui = 'fzf'
    nnoremap <Leader>s <Nop>
'''
[plugins.ftplugin]
vsession-quickpick = '''
    nnoremap <buffer><silent> q :close<CR>
'''
vsession-quickpick-filter = '''
    nmap <buffer><silent> q <Plug>(vsession-quickpick-cancel)
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'help'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = ['mason.nvim']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_func = 'quickrun#'
hook_add = '''
    nnoremap <silent> ,q :call quickrun#run()<CR>
'''

[[plugins]]
repo = 'simrat39/rust-tools.nvim'
on_ft = ['rust']

# [[plugins]]
# repo = 'epwalsh/obsidian.nvim'
# on_source = 'nvim-cmp'
# lua_source = '''
#     require('obsidian').setup({
#         dir = '~/obsidian_vault',
#         notes_subdir = '01_Inbox',
#         daily_notes = {
#             folder = '02_Daily',
#         },
#         completion = {
#             nvim_cmp = false,
#         },
#     })
# '''

[[plugins]]
repo = 'itchyny/vim-qfedit'
on_ft = ['qf']

[[plugins]]
repo = 'Shougo/dda.vim'
depends = ['denops.vim']
on_func = 'dda#'
on_cmd = ['DdaCompletion']
hook_source = '''
    command! -range DdaCompletion <line1>,<line2>call s:DdaCompletion()
    function! s:DdaCompletion() range
        let s:prompt = ''
        for line in range(a:firstline, a:lastline)
            let s:prompt = s:prompt . getline(line) . ' '
        endfor
        call dda#completion(s:prompt)
    endfunction
'''

[[plugins]]
repo = 'lambdalisue/kensaku.vim'
depends = ['denops.vim']
on_source = ['kensaku-search.vim']

[[plugins]]
repo = 'lambdalisue/kensaku-search.vim'
depends = ['kensaku.vim']
on_source = ['pum.vim']

[[plugins]]
repo = 'shellRaining/hlchunk.nvim'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']
lua_source = '''
require('hlchunk').setup({})
'''

[[plugins]]
repo = 'mbbill/undotree'
on_event = ['InsertEnter', 'BufReadPost', 'BufNewFile']

[[plugins]]
repo = 'stevearc/oil.nvim'
on_event = ['CursorHold']
lua_source = '''
require('oil').setup({
    view_options = {
        show_hidden = true
}})
vim.keymap.set("n", "<Leader>o", "<Cmd>Oil<CR>", {desc = "Open parent directory"})
'''

[[plugins]]
repo = 'Robitx/gp.nvim'
on_cmd = ["GpAppend" "GpChatNew", "GpChatNew", "GpChatFinder", "GpRewrite", "GpRewrite", "GpAppend", "GpAppend", "GpPrepend", "GpPrepend", "GpImplement", "GpTranslateToJp", "GpTranslateToEn", "GpNew", "GpNew", "GpVnew", "GpVnew", "GpExplainCode", "GpCreateCommitMessage", "GpRefactor", "GpChatPaste"]
lua_add = '''
-- key mappings
local function keymapOptions(desc)
    return {
        noremap = true,
        silent = true,
        nowait = true,
        desc = "LLM prompt " .. desc,
    }
end

local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local code_completion_prompt = LoadTextFile("codeCompletion.md")
vim.keymap.set("v", "<C-g>c", ":<C-u>'<,'>GpAppend " .. code_completion_prompt .. "<CR>", keymapOptions("Completion"))

vim.keymap.set({"n", "i"}, "<C-g>n", "<Cmd>GpChatNew<CR>", keymapOptions("New Chat"))
vim.keymap.set("v", "<C-g>n", ":<C-u>'<,'>GpChatNew<CR>", keymapOptions("New Chat"))

vim.keymap.set({"n", "i"}, "<C-g>f", "<Cmd>GpChatFinder<CR>", keymapOptions("Chat Finder"))

vim.keymap.set({"n", "i"}, "<C-g>rw", "<Cmd>GpRewrite<CR>", keymapOptions("Rewrite"))
vim.keymap.set("v", "<C-g>rw", ":<C-u>'<,'>GpRewrite<CR>", keymapOptions("Rewrite"))

vim.keymap.set({"n", "i"}, "<C-g>a", "<Cmd>GpAppend<CR>", keymapOptions("Append"))
vim.keymap.set("v", "<C-g>a", ":<C-u>'<,'>GpAppend<CR>", keymapOptions("Append"))

vim.keymap.set({"n", "i"}, "<C-g>p", "<Cmd>GpPrepend<CR>", keymapOptions("Prepend"))
vim.keymap.set("v", "<C-g>p", ":<C-u>'<,'>GpPrepend<CR>", keymapOptions("Prepend"))

vim.keymap.set("v", "<C-g>i", ":<C-u>'<,'>GpImplement<CR>", keymapOptions("Implement"))

vim.keymap.set("v", "<C-g>tj", ":<C-u>'<,'>GpTranslateToJp<CR>", keymapOptions("Translate to JP"))
vim.keymap.set("v", "<C-g>te", ":<C-u>'<,'>GpTranslateToEn<CR>", keymapOptions("Translate to EN"))

vim.keymap.set({"n", "i"}, "<C-g>s", "<Cmd>GpNew<CR>", keymapOptions("New with split"))
vim.keymap.set("v", "<C-g>s", ":<C-u>'<,'>GpNew<CR>", keymapOptions("New with split"))

vim.keymap.set({"n", "i"}, "<C-g>v", "<Cmd>GpVnew<CR>", keymapOptions("Vnew with vsplit"))
vim.keymap.set("v", "<C-g>v", ":<C-u>'<,'>GpVnew<CR>", keymapOptions("Vnew with vsplit"))

vim.keymap.set("v", "<C-g>e", ":<C-u>'<,'>GpExplainCode<CR>", keymapOptions("Explain Code"))
vim.keymap.set("v", "<C-g>g", ":<C-u>'<,'>GpCreateCommitMessage<CR>", keymapOptions("Commit Message"))
vim.keymap.set("v", "<C-g>rf", ":<C-u>'<,'>GpRefactor<CR>", keymapOptions("Refactor"))

vim.keymap.set("v", "<C-g>y", ":<C-u>'<,'>GpChatPaste<CR>", keymapOptions("Paste to Chat"))
'''
lua_source = '''
local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local general_system_prompt = LoadTextFile("generalSystemPrompt.md")

local conf = {
    chat_dir = os.getenv('HOME') .. '/OneDrive/gp/chats',
    providers = {
        googleai = {
            endpoint = "https://generativelanguage.googleapis.com/v1beta/models/{{model}}:streamGenerateContent?key={{secret}}",
            secret = os.getenv("GEMINI_API_KEY"),
        },
        ollama = {
            endpoint = "http://localhost:11434/v1/chat/completions",
        },
    },
    agents = {
        {
            name = "Gemini-Pro",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-1.5-pro-002", top_k = 40},
            system_prompt = general_system_prompt,
        },
        {
            name = "Gemini-Flash",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-2.0-flash-exp", top_k = 40},
            system_prompt = general_system_prompt,
        },
        {
            name = "Gemini-Exp",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-exp-1206", top_k = 64},
            system_prompt = general_system_prompt,
        },
        {
            name = "Gemini-Thinking",
            provider = "googleai",
            chat = true,
            command = true,
            model = {model = "gemini-2.0-flash-thinking-exp-01-21", top_k = 64},
            system_prompt = general_system_prompt,
        },
        {
            name = "Gemma2-2b-jpn",
            provider = "ollama",
            chat = true,
            command = true,
            model = {model = "hf.co/alfredplpl/gemma-2-2b-jpn-it-gguf:latest", top_k = 40},
            system_prompt = general_system_prompt,
        },
    },
    hooks = {
        TranslateToJp = function(gp, params)
            local prompt = LoadTextFile("translateJp.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        TranslateToEn = function(gp, params)
            local prompt = LoadTextFile("translateEn.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        ExplainCode = function(gp, params)
            local prompt = LoadTextFile("explainCode.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        CreateCommitMessage = function(gp, params)
            local prompt = LoadTextFile("createCommitMessage.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.new, agent, prompt)
        end,

        Refactor = function(gp, params)
            local prompt = LoadTextFile("refactor.md")
            local agent = gp.get_command_agent()
            gp.Prompt(params, gp.Target.append, agent, prompt)
        end,
    },
}
require('gp').setup(conf)

local gpNvimScriptFilePath = os.getenv('HOME') .. '/dotfiles/.vim/llm_prompt/gp_nvim_func.vim'
vim.api.nvim_command("source " .. gpNvimScriptFilePath)
'''

[[plugins]]
repo = 'olimorris/codecompanion.nvim'
on_cmd = ['CodeCompanion', 'CodeCompanionChat', 'CodeCompanionActions', 'CodeCompanionCmd']
lua_add = '''
vim.cmd('cabbrev cci CodeCompanion')
vim.cmd('cabbrev ccc CodeCompanionChat')
vim.cmd('cabbrev cca CodeCompanionActions')
vim.cmd('cabbrev ccx CodeCompanionCmd')
'''
lua_source = '''
local function LoadTextFile(fileName)
    local home_dir = os.getenv('HOME')
    local prompt_dir = 'dotfiles/.vim/llm_prompt'
    local filePath = home_dir .. '/' .. prompt_dir .. '/' .. fileName
    local file = io.open(filePath, "r")
    local prompt = ""
    if file then
        prompt = file:read("*a")
        file:close()
    end
    return prompt
end

local default_system_prompt = require('codecompanion.config').opts.system_prompt

require('codecompanion').setup({
    adapters = {
        gemini = function()
            return require('codecompanion.adapters').extend('gemini', {
                schema = {
                    model = {
                        default = "gemini-2.0-flash-exp",
                        choices = {
                            "gemini-2.0-flash-exp",
                            "gemini-1.5-pro-002",
                            "gemini-exp-1206",
                        },
                    },
        }})end,
    },
    strategies = {
        chat = {adapter = "gemini",},
        inline = {adapter = "gemini",},
        agent = {adapter = "gemini",},
    },
    opts = {
        system_prompt = function (opts)
            local my_system_prompt = LoadTextFile("generalSystemPrompt.md")
            return default_system_prompt(opts) .. '\n\n' .. my_system_prompt
        end,
    },
})
'''

[[plugins]]
repo = 'folke/which-key.nvim'
on_event = ['KeyInputPre', 'CursorHold']
lua_source = '''
local wk = require('which-key')
wk.add({
    {"<Leader>g", group = "gitsigns", mode = {"n", "v"}},

    {"<Leader>gs", group = "stage", mode = {"n", "v"}},
    {"<Leader>gsb", "<Cmd>Gitsigns stage_buffer<CR>", desc = "buffer"},
    {"<Leader>gsh", "<Cmd>Gitsigns stage_hunk<CR>", desc = "hunk (toggle)", mode = {"n", "v"}},

    {"<Leader>gr", group = "reset", mode = {"n", "v"}},
    {"<Leader>grb", "<Cmd>Gitsigns reset_buffer<CR>", desc = "buffer"},
    {"<Leader>grh", "<Cmd>Gitsigns reset_hunk<CR>", desc = "hunk", mode = {"n", "v"}},

    {"<Leader>gd", group = "diff"},
    {"<Leader>gdc", "<Cmd>Gitsigns diffthis ~1<CR>", desc = "last commit"},
    {"<Leader>gdi", "<Cmd>Gitsigns diffthis<CR>", desc = "index"},

    {"<Leader>gt", group = "gitsigns (toggle)"},
    {"<Leader>gtb", "<Cmd>Gitsigns toggle_current_line_blame<CR>", desc = "blame (line)"},
    {"<Leader>gtl", "<Cmd>Gitsigns toggle_linehl<CR>", desc = "line highlight"},
    {"<Leader>gtn", "<Cmd>Gitsigns toggle_numhl<CR>", desc = "num highlight"},
    {"<Leader>gts", "<Cmd>Gitsigns toggle_signs<CR>", desc = "signs"},
    {"<Leader>gtw", "<Cmd>Gitsigns toggle_word_diff<CR>", desc = "word diff"},

    {"<Leader>gb", "<Cmd>Gitsigns blame_line full=true<CR>", desc = "blame(full)"},
    {"<Leader>gp", "<Cmd>Gitsigns preview_hunk<CR>", desc = "preview"},

    {"<Leader>s", group = "session"},
    {"<Leader>sd", "<Cmd>DeleteSession<CR>", desc = "delete"},
    {"<Leader>sl", "<Cmd>LoadSession<CR>", desc = "load"},
    {"<Leader>ss", "<Cmd>SaveSession<CR>", desc = "save"},

    {"<C-g>", group = "gp.nvim", mode = {"n", "v"}},
    {"<C-g>t", group = "translate (gp.nvim)", mode = {"v"}},

    {",a", group = "ddu (arglist)"},
    {",f", group = "ddu (file)"},
    {",g", group = "ddu (git)"},
    {",o", group = "ddu (obsidian)"},
    {",r", group = "ddu (grep)"},

    {"<Leader>t", group = "translate (google)", mode = {"n", "v"}},
    {"<C-l>", group = "LSP", mode = {"n", "v"}},
})
'''

[[plugins]]
repo = 'yetone/avante.nvim'
build = 'powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false'
on_cmd = ['AvanteAsk', 'AvanteChat', 'AvanteEdit', 'AvanteFocus', 'AvanteRefresh', 'AvanteShowRepoMap', 'AvanteToggle']
lua_add = '''
local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<Leader>aa', '<Cmd>AvanteAsk<CR>', opts)
vim.keymap.set('n', '<Leader>af', '<Cmd>AvanteFocus<CR>', opts)
vim.keymap.set('n', '<Leader>ar', '<Cmd>AvanteRefresh<CR>', opts)
vim.keymap.set('n', '<Leader>aR', '<Cmd>AvanteShowRepoMap<CR>', opts)
vim.keymap.set('n', '<Leader>at', '<Cmd>AvanteToggle<CR>', opts)
'''
lua_source = '''
require('avante_lib').load()
require('avante').setup({
    provider = "gemini",
    auto_suggestions_provider = "gemini",
    gemini = {model = "gemini-2.0-flash-exp"},
    behavior = {
        auto_suggestions = false,
        auto_set_highlight_group = true,
        auto_set_keymaps = true,
        auto_apply_diff_after_generation = true,
    },
    vendors = {
        ollama = {
            __inherited_from = "openai",
            api_key_name = "",
            endpoint = "http://localhost:11434/v1",
            model = "codegemma:2b",
        }
    }
})
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
on_source = ['avante.nvim', 'codecompanion.nvim', 'gp.nvim']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_source = ['avante.nvim', 'codecompanion.nvim']

[[plugins]]
repo = 'MunifTanjim/nui.nvim'
on_source = ['avante.nvim']
