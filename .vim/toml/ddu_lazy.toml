[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
on_source = ['denops.vim']
lua_source = '''
    vim.cmd.source('~/dotfiles/.vim/settings/ddu_rc.vim')
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
depends = ['ddu.vim']
on_cmd = ['Ddu']

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = ['ddu.vim']
[plugins.ftplugin]
lua_ddu-ff = '''
    vim.keymap.set('n', '<CR>', function() vim.fn['ddu#ui#do_action']('itemAction') end, {remap = false, buffer = true, desc = 'itemAction'})
    vim.keymap.set('n', 'x', function() vim.fn['ddu#ui#do_action']('toggleSelectItem') end, {remap = false, buffer = true, desc = 'toggleSelectItem'})
    vim.keymap.set('n', '*', function() vim.fn['ddu#ui#do_action']('toggleAllItems') end, {remap = false, buffer = true, desc = 'toggleAllItems'})
    vim.keymap.set('n', 'i', function() vim.fn['ddu#ui#do_action']('openFilterWindow') end, {remap = false, buffer = true, desc = 'openFilterWindow'})
    vim.keymap.set('n', '<C-l>', function() vim.fn['ddu#ui#do_action']('redraw', {method = 'refreshItems'}) end, {remap = false, buffer = true, desc = 'redraw'})
    vim.keymap.set('n', 'p', function() vim.fn['ddu#ui#do_action']('togglePreview') end, {remap = false, buffer = true, desc = 'togglePreview'})

    local keycode = function (keycode_str) return vim.api.nvim_replace_termcodes(keycode_str, true, true, true) end
    vim.keymap.set('n', '<C-n>', function() vim.fn['ddu#ui#do_action']('previewExecute', {command = 'normal! ' .. keycode('<C-e>')}) end, {remap = false, buffer = true, desc = 'scrollPreview(Next)'})
    vim.keymap.set('n', '<C-p>', function() vim.fn['ddu#ui#do_action']('previewExecute', {command = 'normal! ' .. keycode('<C-y>')}) end, {remap = false, buffer = true, desc = 'scrollPreview(Prev)'})

    vim.keymap.set('n', 'q', function() vim.fn['ddu#ui#do_action']('quit') end, {remap = false, buffer = true, desc = 'quit'})
    vim.keymap.set('n', '<C-h>', function() vim.fn['ddu#ui#do_action']('cancel') end, {remap = false, buffer = true, desc = 'cancel'})
    vim.keymap.set('n', 'a', function() vim.fn['ddu#ui#do_action']('chooseAction') end, {remap = false, buffer = true, desc = 'chooseAction'})
    vim.keymap.set('n', 'c', function() vim.fn['ddu#ui#multi_actions']('itemAction', {name = 'cd'}) end, {remap = false, buffer = true, desc = 'cd'})
    vim.keymap.set('n', 'd', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'delete'}) end, {remap = false, buffer = true, desc = 'delete'})
    vim.keymap.set('n', 'e', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'edit'}) end, {remap = false, buffer = true, desc = 'edit'})

    vim.keymap.set('n', 'E', function()
        vim.ui.input({prompt = 'params: '}, function(input_str)
            if (input_str == nil) or (input_str == '') then
                return
            end

        local eval_ok, eval_result_or_error = pcall(vim.fn.eval, input_str)
        if not eval_ok then
            return
        end

        local ddu_params = {params = eval_result_or_error}
        local ddu_ok, ddu_error_msg = pcall(vim.fn['ddu#ui#do_action'], 'itemAction', ddu_params)
        if not ddu_ok then
            return
        end
    end) end, {remap = false, buffer = true, desc = 'itemAction(manual)'})

    vim.keymap.set('n', 's', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'open', params = {command = 'split'}}) end, {remap = false, buffer = true, desc = 'open(split)'})
    vim.keymap.set('n', 'u', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'undo'}) end, {remap = false, buffer = true, desc = 'undo'})
    vim.keymap.set('n', 'v', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'open', params = {command = 'vsplit'}}) end, {remap = false, buffer = true, desc = 'open(vsplit)'})
    vim.keymap.set('n', 'N', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'newFile'}) end, {remap = false, buffer = true, desc = 'newFile'})
    vim.keymap.set('n', 'r', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'rename'}) end, {remap = false, buffer = true, desc = 'rename'})
    vim.keymap.set('n', 'yy', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'yank'}) end, {remap = false, buffer = true, desc = 'yank path'})
    vim.keymap.set('n', 't', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'open', params = {command = 'tabedit'}}) end, {remap = false, buffer = true, desc = 'tabedit'})
    vim.keymap.set('n', '<Leader>l', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'loclist'}) end, {remap = false, buffer = true, desc = 'loclist'})
    vim.keymap.set('n', '<Leader>q', function() vim.fn['ddu#ui#do_action']('itemAction', {name = 'quickfix'}) end, {remap = false, buffer = true, desc = 'quickfix'})
    vim.keymap.set('n', 'u', function() vim.fn['ddu#ui#do_action']('updateOptions', {sourceOptions = {['_'] = {matchers = {}}}}) end, {remap = false, buffer = true, desc = 'updateOptions'})
    vim.keymap.set('n', '<Esc><Esc>', '<Nop>', {remap = false, buffer = true, desc = '<Nop>'})
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = ['ddu.vim']
[plugins.ftplugin]
ddu-filer = '''
    nnoremap <buffer> * <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
    nnoremap <buffer> a <Cmd>call ddu#ui#do_action('chooseAction')<CR>
    nnoremap <buffer> b <Cmd>call ddu#ui#do_action('itemAction', {'name': 'dirmark'})<CR>
    nnoremap <buffer> c <Cmd>call ddu#ui#multi_actions([
        \ ['itemAction', {'name': 'copy'}],
        \ ['clearSelectAllItems'],
    \ ])<CR>
    nnoremap <buffer> C <Cmd>call ddu#ui#do_action('itemAction', {'name': 'cd'})<CR>
    nnoremap <buffer> d <Cmd>call ddu#ui#do_action('itemAction', {'name': 'trash'})<CR>
    nnoremap <buffer> D <Cmd>call ddu#ui#do_action('itemAction', {'name': 'delete'})<CR>
    nnoremap <buffer> h <Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
    nnoremap <buffer> I <Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow',
        \ 'params': {'path': fnamemodify(input('New cwd: ', b:ddu_ui_filer_path, 'dir'), ':p')}})<CR>
    nnoremap <buffer> K <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newDirectory'})<CR>
    nnoremap <buffer> m <Cmd>call ddu#ui#do_action('itemAction', {'name': 'move'})<CR>
    nnoremap <buffer> N <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>
    nnoremap <buffer> o <Cmd>call ddu#ui#do_action('expandItem', {'mode': 'toggle'})<CR>
    nnoremap <buffer> O <Cmd>call ddu#ui#do_action('expandItem', {'maxLevel': -1})<CR>
    nnoremap <buffer> p <Cmd>call ddu#ui#do_action('itemAction', {'name': 'paste'})<CR>
    nnoremap <buffer> P <Cmd>call ddu#ui#do_action('togglePreview')<CR>
    nnoremap <buffer> <C-n> <Cmd>call ddu#ui#do_action('previewExecute', #{command: 'execute "normal! \<C-e>"'})<CR>
    nnoremap <buffer> <C-p> <Cmd>call ddu#ui#do_action('previewExecute', #{command: 'execute "normal! \<C-y>"'})<CR>
    nnoremap <buffer> q <Cmd>call ddu#ui#do_action('quit')<CR>
    nnoremap <buffer> r <Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>
    nnoremap <buffer> u <Cmd>call ddu#ui#do_action('itemAction', {'name': 'undo'})<CR>
    nnoremap <buffer> x <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
    nnoremap <buffer> y <Cmd>call ddu#ui#do_action('itemAction', {'name': 'yank'})<CR>
    nnoremap <buffer> <leader>l <Cmd>call ddu#ui#do_action('itemAction', {'name': 'loclist'})<CR>
    nnoremap <buffer> <leader>q <Cmd>call ddu#ui#do_action('itemAction', {'name': 'quickfix'})<CR>
    nnoremap <buffer> <C-l> <Cmd>call ddu#ui#do_action('checkItems')<CR>
    nnoremap <buffer><expr> s ddu#ui#get_item()->get('isTree', v:false) ?
        \ "" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>"
    nnoremap <buffer><expr> v ddu#ui#get_item()->get('isTree', v:false) ?
        \ "" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>"
    nnoremap <buffer> ~ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': expand('~')}})<CR>
    nnoremap <buffer> > <Cmd>call ddu#ui#do_action('updateOptions',
        \ {'sourceOptions': {'file': {'matchers': ToggleHidden('file')}}})<CR>
    nnoremap <buffer><expr> <CR> ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow'})<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open'})<CR>"
    nnoremap <buffer> <Esc><Esc> <Nop>

    nnoremap <buffer> se <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'extension'}}})<CR>
    nnoremap <buffer> sf <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'filename'}}})<CR>
    nnoremap <buffer> ss <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'Size'}}})<CR>
    nnoremap <buffer> st <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'Time'}}})<CR>
    nnoremap <buffer> sre <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'Extension'}}})<CR>
    nnoremap <buffer> srf <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'Filename'}}})<CR>
    nnoremap <buffer> srs <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'size'}}})<CR>
    nnoremap <buffer> srt <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'time'}}})<CR>
    nnoremap <buffer> sn <Cmd>call ddu#ui#do_action('updateOptions', {'uiParams': {'filer': {'sort': 'none'}}})<CR>

    function! ToggleHidden(name)
        const current = ddu#custom#get_current(b:ddu_ui_name)
        const source_options = get(current, 'sourceOptions', {})
        const source_options_name = get(source_options, a:name, {})
        const matchers = get(source_options_name, 'matchers', [])
        return empty(matchers) ? ['matcher_hidden'] : []
    endfunction

    autocmd TabEnter,CursorHold,FocusGained <buffer> call ddu#ui#do_action('checkItems')
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = ['ddu.vim']

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = ['ddu.vim']

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = ['ddu.vim']

[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = ['ddu.vim']

[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
on_source = ['ddu.vim']

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Bakudankun/ddu-source-dirmark'
on_source = ['ddu.vim']
denops_wait = 0

[[plugins]]
repo = 'k-ota106/ddu-source-marks'
on_source = ['ddu.vim']

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kuuote/ddu-source-git_diff'
on_source = ['ddu.vim']

[[plugins]]
repo = 'tennashi/ddu-source-git'
on_source = ['ddu.vim']
denops_wait = 0

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = ['ddu.vim']

[[plugins]]
repo = 'lambdalisue/vim-mr'
on_source = ['ddu-source-mr']
denops_wait = 0

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = ['ddu.vim']

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kyoh86/ddu-filter-converter_hl_dir'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kamecha/ddu-filter-converter_file_info'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = ['ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = ['ddu.vim']

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = ['ddu.vim']

[[plugins]]
repo = 'kmnk/denite-dirmark'
on_source = ['ddu.vim']
